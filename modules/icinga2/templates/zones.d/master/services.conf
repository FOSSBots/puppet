apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  // Specify the remote agent as command execution endpoint, fetch the host custom variable
  command_endpoint = host.vars.agent_endpoint

  // Only assign where a host is marked as agent endpoint
  assign where host.vars.agent_endpoint
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  
  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.vars.os == "Linux" && host.vars.platform == "x86"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "apt" {
  import "generic-service"

  check_command = "apt"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "Flask-site" {
  import "generic-service"

  check_command = "check_website"

  vars.host    = "fossbots.org"

  assign where host.vars.os == "Linux" && host.vars.http == "true"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "ssh #page" {
  import "generic-service"

  check_command = "ssh"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
  command_endpoint = host.vars.agent_endpoint
}

apply Service "ping4 #page" {
  import "generic-service"

  check_command = "ping4"
  vars.ping_wrta = 500
  vars.ping_wpl = 20
  vars.ping_crta = 2000
  vars.ping_cpl = 100
  assign where host.address
  command_endpoint = host.vars.agent_endpoint
}

apply Service "ping6 #page" {
  import "generic-service"

  check_command = "ping6"
  vars.ping_wrta = 500
  vars.ping_wpl = 20
  vars.ping_crta = 2000
  vars.ping_cpl = 100
  assign where host.address6
  command_endpoint = host.vars.agent_endpoint
}

apply Service "Puppet" {
   import "generic-service"
   check_command = "check_puppet_run"
   vars.running_kernel_use_sudo = true
   assign where host.vars.os == "Linux"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "puppet service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "run-puppet"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "Apache" {
   import "generic-service"
   check_command = "check_apache_run"
   assign where host.name == "tools2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "Icinga IRC bot" {
   import "generic-service"
   check_command = "check_icingabot_run"
   assign where host.name == "tools2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "StreamBot" {
   import "generic-service"
   check_command = "check_stream_run"
   assign where host.name == "bots2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "FOSSBots SSL" {
   import "generic-service"
   check_command = "check_ssl_expire"
   vars.host = "bots2002.fossbots.org"
   vars.time = "15"
   assign where host.name == "bots2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "FOSSBots SSL" {
   import "generic-service"
   check_command = "check_ssl_expire"
   vars.host = "tools2002.fossbots.org"
   vars.time = "15"
   assign where host.name == "tools2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "FOSSBots sopel" {
   import "generic-service"
   check_command = "check_sopel_run"
   assign where host.name == "bots2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "Apache" {
   import "generic-service"
   check_command = "check_apache_run"
   assign where host.name == "bots2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "Discord-relay" {
   import "generic-service"
   check_command = "check_discord_run"
   assign where host.name == "bots2002"
   command_endpoint = host.vars.agent_endpoint
}

apply Service "apt" {
  import "generic-service"

  check_command = "apt"

  assign where host.name == NodeName
  command_endpoint = host.vars.agent_endpoint
}

apply Service "sopel prod service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "mirahezebotprodlibera"

  assign where host.name == "bots2002"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "sopel beta service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "mirahezebottestlibera"

  assign where host.name == "bots2002"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "streambot service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "streambot"

  assign where host.name == "bots2002"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "phabdigest-bots-weekly service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "phabdigest-bots-weekly"

  assign where host.name == "tools2002"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "mariadb service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "mariadb"

  assign where host.name == "db2002"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "ufw service" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "ufw"

  assign where host.vars.os == "Linux"
  command_endpoint = host.vars.agent_endpoint
}

apply Service "DB Backups" {
  import "generic-service"

  check_command = "check_systemd_state"
  vars.service = "backup-db"

  assign where host.name == "db2002"
  command_endpoint = host.vars.agent_endpoint
}
